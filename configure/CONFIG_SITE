# CONFIG_SITE

# Make any application-specific changes to the EPICS build
#   configuration variables in this file.
#
# Host/target specific settings can be specified in files named
#   CONFIG_SITE.$(EPICS_HOST_ARCH).Common
#   CONFIG_SITE.Common.$(T_A)
#   CONFIG_SITE.$(EPICS_HOST_ARCH).$(T_A)

# CHECK_RELEASE controls the consistency checking of the support
#   applications pointed to by the RELEASE* files.
# Normally CHECK_RELEASE should be set to YES.
# Set CHECK_RELEASE to NO to disable checking completely.
# Set CHECK_RELEASE to WARN to perform consistency checking but
#   continue building even if conflicts are found.
CHECK_RELEASE = YES

# Set this when you only want to compile this application
#   for a subset of the cross-compiled target architectures
#   that Base is built for.
#CROSS_COMPILER_TARGET_ARCHS = vxWorks-ppc32

# To install files into a location other than $(TOP) define
#   INSTALL_LOCATION here.
#INSTALL_LOCATION=</absolute/path/to/install/top>

# Set this when the IOC and build host use different paths
#   to the install location. This may be needed to boot from
#   a Microsoft FTP server say, or on some NFS configurations.
#IOCS_APPL_TOP = </IOC's/absolute/path/to/install/top>

# For application debugging purposes, override the HOST_OPT and/
#   or CROSS_OPT settings from base/configure/CONFIG_SITE
#HOST_OPT = NO
#CROSS_OPT = NO

# These allow developers to override the CONFIG_SITE variable
# settings without having to modify the configure/CONFIG_SITE
# file itself.
-include $(TOP)/../CONFIG_SITE.local
-include $(TOP)/configure/CONFIG_SITE.local

# If we want to enable the encryption features, we need libmbedtls, LibreSSL,
# or OpenSSL and have to define the appropriate UA_ENABLE_ENCRYPTION_* macro.
# We do this AFTER including CONFIG_SITE.local so that this file can be used to
# define USE_MBEDTLS, USE_LIBRESSL, or USE_OPENSSL and  MBEDTLS_INCLUDE,
# MBEDTLS_LIB, LIBRESSL_INCLUDE, LIBRESSL_LIB, OPENSSL_INCLUDE, or OPENSSL_LIB.
ifeq ($(USE_MBEDTLS),YES)
  USR_CFLAGS += -DUA_ENABLE_ENCRYPTION_MBEDTLS
  USR_CXXFLAGS += -DUA_ENABLE_ENCRYPTION_MBEDTLS
  USR_SYS_LIBS += mbedcrypto mbedtls mbedx509
  ifdef MBEDTLS_LIB
    USR_LDFLAGS += -L$(MBEDTLS_LIB)
  endif
  ifdef MBEDTLS_INCLUDE
    USR_CFLAGS += -I$(MBEDTLS_INCLUDE)
    USR_CXXFLAGS += -I$(MBEDTLS_INCLUDE)
  endif
else ifeq ($(USE_LIBRESSL),YES)
  USR_CFLAGS += -DUA_ENABLE_ENCRYPTION_LIBRESSL
  USR_CXXFLAGS += -DUA_ENABLE_ENCRYPTION_LIBRESSL
  USR_SYS_LIBS += crypto
  ifdef LIBRESSL_LIB
    USR_LDFLAGS += -L$(LIBRESSL_LIB)
  endif
  ifdef LIBRESSL_INCLUDE
    USR_CFLAGS += -I$(LIBRESSL_INCLUDE)
    USR_CXXFLAGS += -I$(LIBRESSL_INCLUDE)
  endif
else ifeq ($(USE_OPENSSL),YES)
  USR_CFLAGS += -DUA_ENABLE_ENCRYPTION_OPENSSL
  USR_CXXFLAGS += -DUA_ENABLE_ENCRYPTION_OPENSSL
  USR_SYS_LIBS += crypto
  ifdef OPENSSL_LIB
    USR_LDFLAGS += -L$(OPENSSL_LIB)
  endif
  ifdef OPENSSL_INCLUDE
    USR_CFLAGS += -I$(OPENSSL_INCLUDE)
    USR_CXXFLAGS += -I$(OPENSSL_INCLUDE)
  endif
endif
